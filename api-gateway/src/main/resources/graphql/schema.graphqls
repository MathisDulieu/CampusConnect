type Query {
    me: User
    classes: [Classroom]
    classesSorted(order: String): [Classroom]
    classById(id: ID!): Classroom
    studentsInClass(classId: ID!): [User]
}

type Mutation {
    login(email: String!, password: String!): String
    register(email: String!, username: String!, password: String!, role: String!): String
    updateUser(username: String, email: String, oldPassword: String, newPassword: String): String
    deleteUser: String

    createClass(name: String!, description: String, courseIds: [ID]): String
    updateClass(id: ID!, name: String, description: String, courseIds: [ID]): String
    deleteClass(id: ID!): String
    addStudentToClass(classId: ID!, studentId: ID!): String
    removeStudentFromClass(classId: ID!, studentId: ID!): String
}

type User {
    id: ID!
    email: String!
    username: String!
    password: String
    role: Role!
}

enum Role {
    STUDENT
    PROFESSOR
    ADMIN
}

type Classroom {
    id: ID!
    name: String!
    description: String
    professorId: ID
    studentIds: [ID]
    courseIds: [ID]
}

input ClassInput {
    name: String!
    description: String
    courseIds: [ID]
}

input SortInput {
    field: String!
    order: SortOrder!
}

enum SortOrder {
    ASCENDING
    DESCENDING
    UNSORTED
}